[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyonelab"
version = "2.0.0"
description = "Onelab for python"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE.txt" }
keywords = ["gmsh", "getdp", "onelab", "meshing", "computational", "physics"]
authors = [
  { email = "benjaminvial84@gmail.com" },
  { name = "The pyonelab Developers" }
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Programming Language :: Python",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Utilities",
]

[tool.setuptools]
packages = ["pyonelab"]

[project.optional-dependencies]
test = [
  "pytest",
  "pytest-cov",
  "pytest-datadir",
  "pytest-sugar",
  "pytest-xdist[psutil]",
  "coverage",
]
doc = [
  "sphinx",
  "pydata-sphinx-theme",
  "myst-parser",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx_gallery",
  "memory_profiler",
  "sphinxcontrib-apidoc",
  "gitpython",
]
dev = [
  "pip",
  "setuptools",
  "wheel",
  "build",
  "flake8",
  "black",
  "twine",
  "isort",
  "radon",
  "pydocstyle",
  "pylint",
  "pylint-json2html",
  "bump-my-version",
  "gitpython",
]
all = ["pyonelab[test,doc,dev]"]

[project.urls]
homepage = "https://github.com/benvial/pyonelab"
code = "https://github.com/benvial/pyonelab"
issues = "https://github.com/benvial/pyonelab/issues"

# [project.entry-points.console_scripts]
# pyonelab = "pyonelab._cli:main"
[tool.isort]
profile = "black"

[tool.setuptools.dynamic]
version = { attr = "pyonelab.__version__" }

[tool.bumpversion]
current_version = "2.0.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = true
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = true
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[tool.bumpversion.parts.pre_l]
values = ["dev", "rc", "final"]
optional_value = "final"
